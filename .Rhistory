}
a(5)
a(5)
suits<-c("spades","hearts","diamonds","clubs")
remain<-c(11,12,11,13)
names(suits)<-remain
names
suits
suits
suits<-c("spades","hearts","diamonds","clubs")
remain<-c(11,12,11,13)
names(remain)<-suits
suits
remain
process<-c("BHT","QCPLATES","BUILDTAG""LPM")
quality<-c(98,99,100,95)
process<-c("BHT","QCPLATES","BUILDTAG","LPM")
quality<-c(98,99,100,95)
names(process)<-quality
process
process<-c("BHT","QCPLATES","BUILDTAG","LPM")
quality<-c("98",99,100,95)
names(process)<-quality
process
process<-c("BHT","QCPLATES","BUILDTAG","LPM")
quality<-c("98","99","100","95")
names(process)<-quality
process
process<-c(BHT,QCPLATES,BUILDTAG,LPM)
quality<-c("98","99","100","95")
class(process)
process<-c(BHT,QCPLATES,BUILDTAG,LPM)
class(process)
process<-c("BHT","QCPLATES","BUILDTAG","LPM")
class(process)
quality<-c("98","99","100","95")
class(quality)
names(process)<-quality
process
process<-c("BHT","QCPLATES","BUILDTAG","LPM")
quality<-c("98","99","100","95")
output(process)<-quality
process
bench(process)<-quality
mark(process)<-quality
number(process)<-quality
names(process)<-quality
?vectors
??vectors
process<-c("BHT","QCPLATES","BUILDTAG","LPM")
quality<-c("98","99","100","95")
remain(process)<-quality
work<-c(TRUE,10,"hii")
class(work)
??vectors
work<-c(TRUE,10,)
class(work)
work<-c(TRUE,10)
class(work)
process<-c("BHT","QCPALTES","BUILDTAG","LPM")
quality<-c(98,99,100,97)
benchmark<-(TRUE,FALSE,TRUE)
benchmark<-c(TRUE,FALSE,TRUE)
df<-data.frame(process,quality,benchmark)
df
process<-c("BHT","QCPALTES","BUILDTAG","LPM")
quality<-c(98,99,100,97)
benchmark<-c(TRUE,FALSE,TRUE,TRUE)
df<-data.frame(process,quality,benchmark)
df
process<-c(BHT,LPM,BIZZDIFF,BHT,LPM,DIFF,FACEBLU)
proces<-c(BHT,LPM,BIZZDIFF,BHT,LPM,DIFF,FACEBLU)
proces<-c("BHT","LPM","BIZZDIFF","BHT","LPM","DIFF","FACEBLU")
procesfactor<-factor(proces)
proces
procesfactor
str(procesfactor)
View(df1)
proces<-c("BHT","LPM","BIZZDIFF","BHT","LPM","DIFF","FACEBLU")
procesfactor<-factor(proces)
proces
procesfactor
process<-c("BHT","LPM","BIZZDIFF","QCPLATES")
quality<-c(98,99,100,95)
benchmark<-c(TRUE,FALSE,TRUE,FALSE)
overall<-list(process,quality,benchmark)
overall
proces<-c(GT,RMI)
proces<-c("GT","RMI")
quality<-c(100,100)
overal<-list(proces,quality,similar=overall)
overal
overal
proces<-c("GT","RMI")
quality<-c(100,100)
overal<-list(proces,quality,similar=overall)
overal
proces<-c("GT","RMI")
quality<-c(100,100)
benchmark<-c(TRUE,FALSE)
df2<-data.frame(proces,quality,benchmark,similar=df1)
df2
df2<-data.frame(proces,quality,benchmark)
df2
process<-c("BHT","QCPALTES","BUILDTAG","LPM")
quality<-c(98,99,100,97)
benchmark<-c(TRUE,FALSE,TRUE,TRUE)
df1<-data.frame(process,quality,benchmark)
df1
proces<-c("GT","RMI")
quality<-c(100,100)
benchmark<-c(TRUE,FALSE)
df2<-data.frame(proces,quality,benchmark,similar=df1)
df2
df1
process<-c("BHT","LPM","BIZZDIFF","QCPLATES")
quality<-c(98,99,100,95)
benchmark<-c(TRUE,FALSE,TRUE,FALSE)
overall<-list(process,quality,benchmark)
overall
process<-c("BHT","LPM","BIZZDIFF","QCPLATES")
quality<-c(98,99,100,95)
benchmark<-c(TRUE,FALSE,TRUE,FALSE)
overall<-list(process,quality,benchmark)
overall
a=c(10,15,20,25,30,35,40,4,50,55,60)
summary(a)
a=c(10,15,20,25,30,35,40,45,50,55,60)
summary(a)
hist(a,breaks=10)
sd(a)
mean(a)
pnorm(50,mean = 34.6,sd=31.4)
k=dnorm(a,.ean=34.68,sd=13.43)
k
plot(a,k,type="l")
girls=c(1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1,5,5,5,5,5)
boys=c(1,1,,2,2,2,3,3,4,4,5,5,6,7,78,8,9,9,0,0,4,5)
boys=c(1,1,,2,2,2,3,3,4,4,5,5,6,7,78,8,9,9,0,0,4,5,6)
boys=c(1,1,2,2,2,3,3,4,4,5,5,6,7,78,8,9,9,0,0,4,5,6)
mean(girls)
mean(boys)
t.test(girls,boys,alternative = "greater")
t.test(girls,mu=6,a;ternative="greater")
t.test(boys,mu=6)
t.test(girls,mu=6,alternative="greater")
a=nom(100,1000,1)
a=rnom(100,1000,1)
a=rnorm(100,1000,1)
a
t.test(a,mu=1000,alternative = "two.sided")
x=c(1,2,3,4,5)
y=c(11,22,34,41,50)
plot(x,y)
t.test(a,mu=1000,alternative = "greater")
install.packages("titanic")
library(titanic)
install.packages("titanic")
library(titanic)
pnorm(50,mean(a$Age,na.rm=T),sd(a$Age,na.rm=T),lower.tail = 50)
pnorm(50,mean(a$Age,na.rm = T),sd(a$Age,na.rm=T),lower.tail = 50)
pnorm(50,mean(a$Age,na.rm = T),sd(a$Age,na.rm=T),lower.tail = F)
pnorm(40,mean(a$AGE,na.rm = T),sd(a$Age,na.rm = T),lower.tail = F)
data("Titanic")
pnorm(50,mean(a$Age,na.rm = T),sd(a$Age,na.rm=T),lower.tail = F)
pnorm(40,mean(a$AGE,na.rm = T),sd(a$Age,na.rm = T),lower.tail = F)
data("titanic")
pnorm(50,mean(a$Age,na.rm = T),sd(a$Age,na.rm=T),lower.tail = F)
pnorm(40,mean(a$AGE,na.rm = T),sd(a$Age,na.rm = T),lower.tail = F)
data("titanic")
install.packages("TITANIC")
library(titanic)
data("TITANIC")
pnorm(50,mean(a$Age,na.rm = T),sd(a$Age,na.rm=T),lower.tail = F)
pnorm(40,mean(a$AGE,na.rm = T),sd(a$Age,na.rm = T),lower.tail = F)
data("titanic")
pnorm(50,mean(a$Age,na.rm = T),sd(a$Age,na.rm=T),lower.tail = F)
pnorm(40,mean(a$AGE,na.rm = T),sd(a$Age,na.rm = T),lower.tail = F)
data("titanic_train")
a=train
a=titanictrain
a=titanic_train
pnorm(50,mean(a$Age,na.rm = T),sd(a$Age,na.rm=T),lower.tail = F)
pnorm(40,mean(a$AGE,na.rm = T),sd(a$Age,na.rm = T),lower.tail = F)
pnorm(40,mean(a$AGE,na.rm = T),sd(a$Age,na.rm =T),lower.tail = F)
sdn=(titanic$fare-min(titanic$fare))/(max(titanic$fare)-min(titanic$fare))
sdn=(titanic_train$fare-min(titanic$fare))/(max(titanic_train$fare)-min(titanic_train$fare))
sdn=(a$fare-min(titanic$fare))/(max(a$fare)-min(a$fare))
range(sdn)
install.packages("titanic")
install.packages("titanic")
library(titanic)
data("titanic_train")
a=titanic_train
View(t)
library(titanic)
View(titanic)
View(a)
pnorm(50,mean(a$Age,na.rm = T),sd(a$Age,na.rm=T),lower.tail = F)
pnorm(40,mean(a$AGE,na.rm = T),sd(a$Age,na.rm =T),lower.tail = F)
pnorm(40,mean(a$Age,na.rm = T),sd(a$Age,na.rm =T),lower.tail = F)
sdn=(a$fare-min(titanic$fare))/(max(a$fare)-min(a$fare))
range(sdn)
range(sdn)
sdn=(a$fare-min(a$fare))/(max(a$fare)-min(a$fare))
range(sdn)
sdn=(a$Fare-min(a$Fare))/(max(a$Fare)-min(a$Fare))
range(sdn)
t.test(titanic$Age~a$Sex,alternative="less")
t.test(a$Age~a$Sex,alternative="less")
t.test(a$Age~a$Sex,alternative="greater")
t.test(a$Age~a$Sex,alternative="twosdide")
t.test(a$Age~a$Sex,alternative="twos.sided")
t.test(a$Age~a$Sex,alternative="two.sided")
k=plot(density(a$Age,na.rm=T),main="Age plot"ylab="density")
k=plot(density(a$Age,na.rm=T),main="Age plot"ylab="density")
range(a$Age,na.rm = T)
sum(549,342)
prop.table(table(a$Survived))
sum((549,342))
sum(549,342)
prop.table(table(a$Sex))
prop.table(table(titanic[a$Sex=="female","survivd"])){2}
prop.table(table(a[a$Sex=="female","survivd"]))[2]
prop.table(table(a[a$Sex=="female","survived"]))[2]
prop.table(table(a[a$Sex=="Female","survived"]))[2]
HEAD(A)
k(Ahead
head(a)
prop.table(table(a[a$Sex=="female","Survived"]))[2]
prop.table(table(a[a$Sex=="Male","Survived"]))[2]
prop.table(table(a[a$Sex=="male","Survived"]))[2]
prop.table(table(a[a$Sex=="male","survived"])) [2]
prop.table(table(a[a$Sex=="male","Survived"])) [2]
ggplot(credit)+aes(job,amount)+geom_boxplot()
q()
library(ISLR)
library(car)
head(mtcars)
head(mtcars)
dim(mtcars)
hist(mtcars$mpg)
hist(1/(mtcars$mpg))
cor(mtcars[,-1])
cor(mtcars)
fit=lm(mpg~   hp+wt,data=mtcars)
summary(fit)
cor(mtcars)
names(fit)
fit$coefficients
fit$residuals
hist(fit$residuals)
library(MASS)
library(MASS)
residuals=stdres(fit)
summary(residuals)
hist(residuals)
mtcars$mpg_s=scale(mtcars$mpg)
plot(fit$fitted.values,residuals)
durbinwatsontest(fit)
durbinwatsonTest(fit)
?durbinwatsontest
?durbinWatsonTest
library(car)
install.packages(car)
library(car)
durbinwatsonTest(fit)
outliertest(fit)
cutoff<-4/((nrow(mtcars)-2 -1))
cd>cutoff
cutoff
?cooks.distance
cooks.distance(cutoff)
cooks.distance
cutoff<-4/((nrow(mtcars)-2 -1))
cd>cutoff
cd >cutoff
plot(fit,which=1,cook,levels=cutoff) ##which takes(1,2,3,4,5)
plot(fit,which=2,cook,levels=cutoff)
plot(fit,which=3,cook,levels=cutoff)
plot(fit,which=1,cook,levels=cutoff)
plot(fit,which=4,cook,levels=cutoff)
plot(fit,which=5,cook,levels=cutoff)
plot(fit,which=6,cook,levels=cutoff)
plot(fit,which=1,cook,levels=cutoff)##which takes(1,2,3,4,5)
plot(fit,which=2,cook,levels=cutoff)
plot(fit,which=3,cook,levels=cutoff)
plot(fit,which=4,cook,levels=cutoff)
plot(fit,which=5,cook,levels=cutoff)
plot(fit,which=6,cook,levels=cutoff)
vif(fit)
mtcars$rownum=seq(1:nrow(mtcars))
head(mtcars)
vif(fit)
library(recommenderlab)
library(ggplot2)
install.packages("recommenderlab")
library(recommenderlab)
library("recommenderlab")
install.packages("ggplot")
library(ggplot2)
data("MovieLense")
MovieLense
class(MovieLense)
install.packages("recommenderlab")
library(recommenderlab)
install.packages("ggplot")
y
q()
q()
q()
q()
q()
q()
q()
library(tm)
library(wordcloud)
library(stringr)
library(gsubfn)
library(stopwords)
files=setwd("C:/Users/Krishnan/Desktop/textmining")
filelist=list.files(path=files)
paste(files,"\\",filelist)
paste(files,"\\",filelist)
#To remove the unwanted files from the list
filelist=list.files(path = files,pattern = "*.txt")
filelist
lapply(filelist,FUN=readLines)
a=lapply(filelist,FUN=readLines)
lapply(a,FUN=paste,collapse=" ")
corpus=lapply(a,FUN = paste,collapse=" ")
#To clean the data like punctuation's using G-sub
corpus2=gsubfn(pattern="\\W",replace=" ",corpus)
corpus2
files=setwd("C:/Users/Krishnan/Desktop/textmining")
filelist=list.files(path=files)
paste(files,"\\",filelist)
#To remove the unwanted files from the list
filelist=list.files(path = files,pattern = "*.txt")
filelist
lapply(filelist,FUN=readLines)
a=lapply(filelist,FUN=readLines)
lapply(a,FUN=paste,collapse=" ")
corpus=lapply(a,FUN = paste,collapse=" ")
#To clean the data like punctuation's using G-sub
corpus2=gsubfn(pattern="\\W",replace=" ",corpus)
corpus2
#To clean the data removing digits
corpus2=gsubfn(pattern = "\\d",replace=" ",corpus2)
corpus2
#To lowercase the letters to remove stop words
corpus2=tolower(corpus2)
corpus2
#To remove STOP words
removeWords(corpus2,stopwords("english"))
#To remove the remaining apostrophe's
gsubfn(pattern = "\\b[A-z]\\b{1}",replace=" ",corpus2)
#To remove the white spaces
corpus2=stripWhitespace(corpus2)
corpus2
#To build a WordCloud
wordcloud(corpus2)
corpus2
library(wordcloud)
#To build a WordCloud
wordcloud(corpus2)
library(gsubfn)
#To clean the data like punctuation's using G-sub
corpus2=gsubfn(pattern="\\W",replace=" ",corpus)
corpus2
#To clean the data removing digits
corpus2=gsubfn(pattern = "\\d",replace=" ",corpus2)
corpus2
#To lowercase the letters to remove stop words
corpus3=tolower(corpus2)
corpus3
#To remove STOP words
removeWords(corpus3,stopwords("english"))
#To remove the remaining apostrophe's
gsubfn(pattern = "\\b[A-z]\\b{1}",replace=" ",corpus3)
#To remove the white spaces
corpus4=stripWhitespace(corpus3)
corpus2
#To build a WordCloud
wordcloud(corpus4)
library(stopwords)
#To remove STOP words
removewords(corpus3,stopwords("english"))
#To remove STOP words
removeWords(corpus3,stopwords("english"))
#To remove the remaining apostrophe's
gsubfn(pattern = "\\b[A-z]\\b{1}",replace=" ",corpus3)
#To remove the remaining apostrophe's
corpus3=gsubfn(pattern = "\\b[A-z]\\b{1}",replace=" ",corpus3)
#To remove the white spaces
corpus4=stripWhitespace(corpus3)
corpus2
#To build a WordCloud
wordcloud(corpus4)
#To remove STOP words
corpus3=removeWords(corpus3,stopwords("english"))
#To remove the remaining apostrophe's
corpus3=gsubfn(pattern = "\\b[A-z]\\b{1}",replace=" ",corpus3)
#To remove the white spaces
corpus4=stripWhitespace(corpus3)
corpus4
#To build a WordCloud
wordcloud(corpus4)
library(tm)
library(wordcloud)
library(stringr)
library(gsubfn)
library(stopwords)
files=setwd("C:/Users/Krishnan/Desktop/textmining")
filelist=list.files(path=files)
paste(files,"\\",filelist)
#To remove the unwanted files from the list
filelist=list.files(path = files,pattern = "*.txt")
filelist
lapply(filelist,FUN=readLines)
a=lapply(filelist,FUN=readLines)
lapply(a,FUN=paste,collapse=" ")
#To clean the data like punctuation's using G-sub
corpus2=gsubfn(pattern="\\W",replace=" ",corpus)
corpus2
#To clean the data removing digits
corpus2=gsubfn(pattern = "\\d",replace=" ",corpus2)
corpus2
#To lowercase the letters to remove stop words
corpus3=tolower(corpus2)
corpus3
#To remove STOP words
corpus3=removeWords(corpus3,stopwords("english"))
#To remove the remaining apostrophe's
corpus3=gsubfn(pattern = "\\b[A-z]\\b{1}",replace=" ",corpus3)
#To remove the white spaces
corpus4=stripWhitespace(corpus3)
corpus4
#To build a WordCloud
wordcloud(corpus4)
documents = Corpus(VectorSource(files))
filelist=list.files(path=files)
paste(files,"\\",filelist)
files=setwd("C:/Users/Krishnan/Desktop/textmining")
filelist=list.files(path=files)
paste(files,"\\",filelist)
documents = Corpus(VectorSource(filelist))
#To remove the unwanted files from the list
filelist=list.files(path = files,pattern = "*.txt")
filelist
lapply(filelist,FUN=readLines)
a=lapply(filelist,FUN=readLines)
lapply(a,FUN=paste,collapse=" ")
corpus=lapply(a,FUN = paste,collapse=" ")
#To clean the data like punctuation's using G-sub
corpus2=gsubfn(pattern="\\W",replace=" ",corpus)
corpus2
#To clean the data removing digits
corpus2=gsubfn(pattern = "\\d",replace=" ",corpus2)
corpus2
#To lowercase the letters to remove stop words
corpus3=tolower(corpus2)
corpus3
#To remove STOP words
corpus3=removeWords(corpus3,stopwords("english"))
#To remove the remaining apostrophe's
corpus3=gsubfn(pattern = "\\b[A-z]\\b{1}",replace=" ",corpus3)
#To remove the white spaces
corpus4=stripWhitespace(corpus3)
corpus4
#To build a WordCloud
wordcloud(corpus4)
filelist = Corpus(VectorSource(filelist))
#To remove the unwanted files from the list
filelist=list.files(path = files,pattern = "*.txt")
filelist
lapply(filelist,FUN=readLines)
a=lapply(filelist,FUN=readLines)
lapply(a,FUN=paste,collapse=" ")
corpus=lapply(a,FUN = paste,collapse=" ")
#To clean the data like punctuation's using G-sub
corpus2=gsubfn(pattern="\\W",replace=" ",corpus)
corpus2
#To clean the data removing digits
corpus2=gsubfn(pattern = "\\d",replace=" ",corpus2)
corpus2
#To lowercase the letters to remove stop words
corpus3=tolower(corpus2)
corpus3
#To remove STOP words
corpus3=removeWords(corpus3,stopwords("english"))
#To remove the remaining apostrophe's
corpus3=gsubfn(pattern = "\\b[A-z]\\b{1}",replace=" ",corpus3)
#To remove the white spaces
corpus4=stripWhitespace(corpus3)
corpus4
#To build a WordCloud
wordcloud(corpus4)
corpus2
#To build a WordCloud
wordcloud(corpus4)
corpus3 = corpus3(VectorSource(filelist))
corpus3
corpus3 = corpus3(VectorSource(filelist))
corpus3 = corpus3(VectorSource(corpus3))
corpus3 = corpus(VectorSource(corpus3))
corpus3 = corpus(VectorSource(corpus2))
corpus3 = corpus(VectorSource(corpus3))
#To build a WordCloud
wordcloud(corpus4)
#To get the data type of the file list
str(filelist)
